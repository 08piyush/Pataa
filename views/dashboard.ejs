<!DOCTYPE html>
<html lang="en">
  <!--  META AND USEFUL SCRIPTS LINKS -->
  <head>
    <title>Dynamic Search</title>
    <style>
      #map {
        height: 400px;
      }
    </style>
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1"
      charset="utf-8"
    />
    <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.7.1/dist/leaflet.js"></script>
    <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ENjdO4Dr2bkBIFxQpeoTz1HIcje39Wm4jDKdf19U8gI4ddQ3GYNS7NTKfAdVQSZe"
    crossorigin="anonymous"
  ></script>
    
  <link
      href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-KK94CHFLLe+nY2dmCWGMq91rCGa5gtU4mk92HdvYe+M/SXH301p5ILy+dN9+nJOZ"
      crossorigin="anonymous"
    />
  </head>


  <body>
    <!-- STRUCTURE OF PAGE IS DEFINED HERE: FIELDS, BUTTONS AND RESULTS -->
    <div class="container">
      <h1>Dynamic Search</h1>

      <!--  ENTER SEARCH QUERY HERE  -->
      <div class="form-group mt-4">
        <label for="searchInput">Search:</label>
        <input
          type="text"
          class="form-control"
          id="search"
          placeholder="Enter search query"
          autocomplete="off"
        />
      </div>

      <!--  ENTER LATITUDE LONGITUDES HERE -->
      <div>
        <div class="container mt-4">
          <label for="searchInput">enter longitude:</label>
          <input
            type="text"
            class="form-control"
            id="searchLong"
            placeholder="Enter longitude "
            autocomplete="off"
          />
          <label for="searchInput">enter latitude:</label>
          <input
            type="text"
            class="form-control"
            id="searchLat"
            placeholder="Enter latitude "
            autocomplete="off"
          />
        </div>
        <button class="btn btn-primary" id="searchButton">Search</button>
        <button class="btn btn-primary" id="downloadButton">Download</button>
        <button class="btn btn-primary" id="CoButton">Go by coordinates</button>
        <button class="btn btn-primary" id="markButton">Mark on map</button>
      </div>

      <!--  DISPLAY OUTPUT HERE  -->
      <table class="table table-striped mt-4" id="results">
        <!-- <thead>
          <tr>
            <th>name</th>
            <th>PATAA_CODE</th>
            <th>ZIP_CODE</th>
            <th>address</th>
            <th>COUNTRY_NAME</th>
            <th>STATE_NAME</th>
            <th>CITY_NAME</th>
            <th>GEO_LOCATION</th>
            <th>score</th>

            Add more columns as needed
          </tr>
        </thead> -->
        <tbody id="results_body">
          <!-- Results will be dynamically added here -->
        </tbody>
      </table>
    </div>
    <div id="map"></div>






    <!--  SCRIPT PART BEGIN -->
    <script type="text/javascript">
      //  QUERY SELECTORS FROM HTML 

      const searchInput     = document.querySelector("#search");
      const results_body    = document.querySelector("#results_body");
      const searchClick     = document.querySelector("#searchButton");
      const downloadClick   = document.querySelector("#downloadButton");
      const CoClick         = document.querySelector("#CoButton");
      const markButton      = document.querySelector("#markButton");


      //  GLOBAL  VARIABLES
      let currentQuery = null;
      let requestInProgress = false;
      let request = null;
      let downloadResults = null;
      let map;
      let osm;
      let results_fetched; 



      //   EVENT LISTENERS

      //  FOR SEARCH FIELD QUERY 
      searchInput.addEventListener("input", () => {
        const query = searchInput.value;
        load_data(query);
      });
      
      //  FOR SEARCH BUTTON CLICK 
      searchClick.addEventListener("click", () => {
        const query = searchInput.value;
        load_data(query);
      });
      
      //  FOR GO BY COORDINATES BUTTON 
      CoClick.addEventListener("click", () => {
        var long = searchLong.value;
        var lat = searchLat.value;
        const query = [long, lat];

        load_data2(query);
        // if (
        //   typeof long !== "string" &&
        //   typeof lat !== "string" &&
        //   long !== null &&
        //   lat !== null
        // ) {
        //   load_data2(query);
        // } else {
        //   var q = " ";
        //   load_data(q);
        // }
      });
      
      //  FOR MARKING POINTS ON MAP 
      markButton.addEventListener("click", () => {
        reinitializeMap();
      });
      
      //  FOR DOWNLOADING TABULAR RESULTS 
      downloadClick.addEventListener("click", async () => {
        const query = searchInput.value;
        if (downloadResults) {
          const worksheet = XLSX.utils.json_to_sheet(downloadResults);
          const workbook = XLSX.utils.book_new();
          worksheet["!cols"] = [{ wch: 25 }, {}]; // Adjust the index if needed
          XLSX.utils.book_append_sheet(workbook, worksheet, "SearchResults");
          XLSX.writeFile(workbook, query + ".xlsx", { compression: true });
        }
      });







      //  FUNCTIONS CALLED FOR LOADING DATA 
      
      load_data();
      //   LOAD DATA FOR SEARCH FIELDS 
      async function load_data(query) {
        let html = ` <thead>
          <tr>
            <th>name</th>
            <th>PATAA_CODE</th>
            <th>ZIP_CODE</th>
            <th>address</th>
            <th>COUNTRY_NAME</th>
            <th>STATE_NAME</th>
            <th>CITY_NAME</th>
            <th>GEO_LOCATION</th>
            <th>score</th>
       
            <!-- Add more columns as needed -->
          </tr>
        </thead>`;

        console.log("iam in search query");
        downloadResults = null;
        // to avoid aggregation of query results we use current query
        // otherwise it would be showing the previously generated results
        // which got delayed in fetching
        currentQuery = query;
        if (!query) {
          displayNoQueryMessage();
        } else if (isInputStringSpace(query)) {
          html += `
                <tr>
                    <td colspan="10" class="text-center"> why s   p   a   c   e ??? üôÑ${query}üôÑ  </td>
                </tr>
                `;
          results_body.innerHTML = html;
        } else {
          if (request && requestInProgress) {
            // Abort the previous request if it's still in progress
            request.abort();
          }

          request = new XMLHttpRequest();
          console.log("query : up : ", query, `/allInOne?q=${query}`);
          request.open("POST", `/allInOne?q=${query}`);
          request.setRequestHeader("Content-Type", "application/json");
          requestInProgress = true; // Set the flag to indicate that a request is in progress
          request.onload = () => {
            if (query === currentQuery) {
              if (request.status === 200) {
                const results = JSON.parse(request.responseText);
                // console.log("results :  : : ", results);

                if (results?.length > 0) {
                  results.forEach(async (result) => {
                    html +=
                      `
                <tr>
                    <td>` +
                      result.name +
                      `</td>
                    <td>` +
                      result.pataa_code +
                      `</td>
                    <td>` +
                      result.zipcode +
                      `</td>
                    <td>` +
                      result.address +
                      `</td>
                    <td>` +
                      result.country_name +
                      `</td>
                    <td>` +
                      result.state_name +
                      `</td>
                    <td>` +
                      result.city_name +
                      `</td>
                    <td>` +
                      result.geo_location +
                      `</td>
                    <td>` +
                      result.Score +
                      `</td>

                </tr>
                `;
                  });
                  results_body.innerHTML = html;
                } else {
                  html += `
                <tr>
                    <td colspan="10" class="text-center">No Data Found ü§∑‚Äç‚ôÄÔ∏èüöß </td>
                </tr>
                `;
                }
                results_body.innerHTML = html;
                downloadResults = results;
              } else {
                console.log("Error fetching data:", request.status);
              }
            }
            requestInProgress = false;
          };

          const que = JSON.stringify({ query });
          request.send(que);
        }
      }
      
      
      //  LOAD DATA FOR COORDINATES
      async function load_data2(query) {
        var que = { query1: query[0], query2: query[1] };

        console.log("que : ", que);
        let html = ` <thead>
          <tr>
            <th>id</th>
            <th>dist_nm</th>
            <th>state_nm</th>
            <th>ulb_nm_e</th>

            <!-- Add more columns as needed -->
          </tr>
        </thead>`;

        downloadResults = null;
        currentQuery = query;
        if (!query) {
          displayNoQueryMessage();
        } else if (isInputStringSpace1(query)) {
          html += `
                <tr>
                    <td colspan="10" class="text-center"> why s   p   a   c   e ??? üôÑ${query}üôÑ  </td>
                </tr>
                `;
          results_body.innerHTML = html;
        } else {
          if (request && requestInProgress) {
            // Abort the previous request if it's still in progress
            request.abort();
          }
          request = new XMLHttpRequest();
          console.log(
            "query : up : ",
            query,
            `/allInOne2?q1=${que.query1}&q2=${que.query2}`
          );
          request.open("POST", `/allInOne2?q1=${que.query1}&q2=${que.query2}`);
          request.setRequestHeader("Content-Type", "application/json");
          requestInProgress = true; // Set the flag to indicate that a request is in progress
          request.onload = () => {
            if (query === currentQuery) {
              if (request.status === 200) {
                const results = JSON.parse(request.responseText);
                // console.log("results :  : : ", results);
                if (results?.length > 0) {
                  results.forEach(async (result) => {
                    html +=
                      `
                <tr>
                    <td>` +
                      result.id +
                      `</td>
                    <td>` +
                      result.dist_nm +
                      `</td>
                    <td>` +
                      result.state_nm +
                      `</td>
                    <td>` +
                      result.ulb_nm_e +
                      `</td>
                </tr>
                `;
                  });
                  results_body.innerHTML = html;
                } else {
                  html += `
                <tr>
                    <td colspan="10" class="text-center">No Data Found ü§∑‚Äç‚ôÄÔ∏èüöß </td>
                </tr>
                `;
                }
                results_body.innerHTML = html;
                downloadResults = results;
              } else {
                console.log("Error fetching data:", request.status);
              }
            }
            requestInProgress = false;
          };

          que = JSON.stringify(que);

          console.log("query : ", que);
          request.send(que);
        }
      }
      
      
      //  MARK DATA ON MAP
      async function load_data3() {
        // REQUEST IS CREATED
        request = new XMLHttpRequest();
        request.open("POST", `/allInOneInsideOut`);
        request.setRequestHeader("Content-Type", "application/json");
        requestInProgress = true; // Set the flag to indicate that a request is in progress
        // REQUEST IS LOADED
        request.onload = () => {
          if (request.status === 200) {
            // RESULTS ARE FETCHED
            results_fetched = JSON.parse(request.responseText);
           //  THESE RESULTS ARE PASSED INTO MAP FUNCTIONS 
          } else {
            console.log("Error fetching data:", request.status);
          }
        };
        // REQUEST IS SENT
        request.send();
      }







     // FUNCTION TO LOAD AND REGENERATE MAP

    //   TO INITIALISE MAP 
     function initMap(results_fetched) {
        map = L.map("map").setView([22.727183,75.854494], 12); // Place a marker on the same location.
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
          attribution:
            'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
          maxZoom: 18,
        }).addTo(map);

        var redIcon = L.icon({
          iconUrl:
            "https://www.pngkit.com/png/full/13-130702_google-location-icon-png-location-icon.png", // URL to the marker image
          iconSize: [25, 41], // size of the icon image
          iconAnchor: [12, 41], // anchor point of the icon (bottom center)
        });
        var blueIcon = L.icon({
          iconUrl:
            "https://www.pngkit.com/png/full/17-175946_location-vector-symbol-google-maps-marker-blue.png", // URL to the marker image
          iconSize: [25, 41], // size of the icon image
          iconAnchor: [12, 41], // anchor point of the icon (bottom center)
        });

        for (var i = 0; i < results_fetched.length; i++) {
          // Target's GPS coordinates.
          var target = L.latLng(results_fetched[i].latitude, results_fetched[i].longitude); 
          // Place a marker on the same location.
          if (results_fetched[i].location === "inside") {
            L.marker(target, { icon: blueIcon }).addTo(map);
          } else {
            L.marker(target, { icon: redIcon }).addTo(map);
          }
           } }
      
    //  TO REMOVE MAP 
      function removeMap() {
        if (map) {
          map.remove();
        }
      }
    
    //  TO REINITIALISING MAP ON AFTER REMOVING ON SECOND CLICK
      function reinitializeMap() {
        removeMap(); // First, remove the existing map
        load_data3();
        setTimeout(()=>{
          console.log("wwww ", results_fetched);
        if(results_fetched){
        initMap(results_fetched); // Then, initialize a new map
      }
        },1000)
        }







      //  STARTING PAGE
      function displayNoQueryMessage() {
              let html = `
              <tr>
                <td colspan="10" class="text-center">Type something in the search box! üëÄ</td>
              </tr>
            `;
              results_body.innerHTML = html;
            }






      // EXTRA FUNCTIONS TO AVOID EXCEPTIONAL CASES LIKE ONLY SPACES IN SEARCH FIELDS


      // FOR SEARCH KEYWORD FIELD
      function isInputStringSpace(inputString) {
        var stringWithoutSpaces = inputString.replace(/\s/g, "");
        if (stringWithoutSpaces.length === 0) {
          return true;
        } else {
          return false;
        }
      }
     
     
      // FOR LAT LONG FIELDS
      function isInputStringSpace1(inputString) {
        console.log("input string : ", inputString);
        var stringWithoutSpaces0 = inputString[0].replace(/\s/g, "");
        var stringWithoutSpaces1 = inputString[1].replace(/\s/g, "");

        if (
          stringWithoutSpaces0.length === 0 &&
          stringWithoutSpaces1.length === 0
        ) {
          return true;
        } else {
          return false;
        }
      }
 

    </script>
    <!-- SCRIPT PART END -->
  </body>
</html>
